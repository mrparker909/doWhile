% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doWhile.R
\name{doWhile}
\alias{doWhile}
\title{doWhile}
\usage{
doWhile(do, While = F, Return = NULL)
}
\arguments{
\item{do}{Expression to evaluate at least once.}

\item{While}{Logical expression indicating the stopping condition. The doWhile loop will end when the While condition is no longer TRUE.}

\item{Return}{Expression to evaluate and return (allows access to variables scoped inside the doWhile function).}

\item{env}{Environment in which to evaluate expressions.}
}
\description{
doWhile
}
\examples{

# Note that i remains zero here due to scoping
i=0
doWhile(do={i=i+1; print(i)}, While={i<10}, Return=i)
print(i)

# But we can force an update of i using "i <<- i+1"
i=0
doWhile(do={i<<-i+1; print(i)}, While={i<10}, Return=i)
print(i)

# or we can declare i (and jPI) in the scope of the doWhile:
jPI=doWhile(do={if(!exists("i")|!exists("jPI")){i<-0;jPI<-0}
                else{i=i+1; jPI=jPI+pi}},
            While={i<10},
            Return={jPI})
print(jPI)

# Using a list lets us check existence just once when we have many parameters in the loop:
Y = doWhile(do    ={ if(!exists("E")) {E<-list(x=pi, y=exp(1))}; E$y=E$x+E$y},
            While ={ E$y < 100},
            Return={ E$y})
}
